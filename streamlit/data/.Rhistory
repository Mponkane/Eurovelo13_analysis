.libPaths()
library(r5r)
library(sf)
?st_read
library(r5r)
library(sf)
# build transport network
data_path <- system.file("extdata/kuopio", package = "r5r")
r5r_core <- setup_r5(data_path)
# allocate RAM memory to Java
options(java.parameters = "-Xmx10G")
library(r5r)
library(sf)
# build transport network
data_path <- system.file("extdata/kuopio", package = "r5r")
r5r_core <- setup_r5(data_path)
# allocate RAM memory to Java
options(java.parameters = "-Xmx8G")
library(r5r)
library(sf)
data_path <- system.file("extdata/kuopio", package = "r5r")
r5r_core <- setup_r5(data_path,
verbose = T)
stop_r5()
data_path <- system.file("extdata/kuopio", package = "r5r")
r5r_core <- setup_r5(data_path,
verbose = T)
gc()
delete_cache()
library(R.cache)
install.packages("R.cache")
library(R.cache)
clearCache()
# allocate RAM memory to Java
options(java.parameters = "-Xmx8G")
library(r5r)
library(sf)
data_path <- system.file("extdata/kuopio", package = "r5r")
r5r_core <- setup_r5(data_path,
verbose = T)
library(sf)
library(dplyr)
setwd("C:/Users/MattiPonkanen/github/Eurovelo13_analysis/streamlit/data")
kp <- st_read("kansallispuistot.shp")
vama <- st_read("VAMA.shp")
palvelut <- st_read("palvelut.shp")
buffer <- st_read("buffer.shp")
palvelut$stroke <- NA
# Merge kp and vama
merged_polygons <- rbind(kp, vama)
buffer <- st_transform(buffer, crs = st_crs(merged_polygons))
# Create a new field called 'segmentti' in the merged_polygons shapefile
merged_polygons$segmentti <- NA
# Loop through each polygon in the merged_polygons shapefile
for (i in 1:nrow(merged_polygons)) {
# Get the current polygon
polygon <- merged_polygons[i, ]
# Find the buffer polygons that intersect the current polygon
intersects <- st_intersects(polygon, buffer)
# Check if the polygon intersects any buffer polygons
if (length(intersects[[1]]) > 0) {
# Get the names of the buffer polygons that intersect the current polygon
intersects_names <- buffer[intersects[[1]], ]$name
# Check if the polygon intersects multiple buffer polygons
if (length(intersects_names) > 1) {
# The polygon intersects multiple buffer polygons, so we need to decide how to handle this case
# One option is to concatenate all the intersecting buffer polygon names into a single string separated by commas
merged_polygons$segmentti[i] <- paste(intersects_names, collapse = ", ")
} else {
# The polygon only intersects one buffer polygon, so we can simply use its name as the value for the 'segmentti' field
merged_polygons$segmentti[i] <- intersects_names
}
}
}
# Transform palvelut to the CRS of merged_polygons
palvelut_transformed <- st_transform(palvelut, crs = st_crs(merged_polygons))
# Merge palvelut_transformed with merged_polygons
merged_polygons <- rbind(merged_polygons, palvelut_transformed)
# Write the updated merged_polygons shapefile back to disk
st_write(merged_polygons, "palvelut_ja_virkistyskohteet", driver = "GeoJSON")
library(sf)
library(dplyr)
setwd("C:/Users/MattiPonkanen/github/Eurovelo13_analysis/streamlit/data")
kaikki_palvelut <- st_read("servicesVE1.shp")
# Rename the values in the 'type' column
kaikki_palvelut$type <- gsub("apteekit", "Apteekki", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("huoltoasemat", "Huoltoasemat", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("kahvilat_ja_ravintolat", "Kahvilat ja ravintolat", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("kulttuurikohteet", "Kulttuurikohteet", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("laavu_kota_kammi", "Laavu kota tai kammi", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("majoituskohteet", "Majoituskohteet", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("muistomerkki", "Muistomerkki", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("pyoramatkailijatunnus", "Pyörämatkailijatunnus", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("ruokakaupat", "Ruokakaupat", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("uimapaikat", "Uimapaikat", kaikki_palvelut$type)
kaikki_palvelut$color <- ifelse(kaikki_palvelut$type == "Apteekki", "#027a16",
ifelse(kaikki_palvelut$type == "Huoltoasemat", "#170791",
ifelse(kaikki_palvelut$type == "Kahvilat ja ravintolat", "#ed0270",
ifelse(kaikki_palvelut$type == "Ruokakaupat", "#fc950d",
ifelse(kaikki_palvelut$type == "Kulttuurikohteet", "#8604b5",
ifelse(kaikki_palvelut$type == "Muistomerkki", "#085d69",
ifelse(kaikki_palvelut$type == "Uimapaikat", "#d1b604",
ifelse(kaikki_palvelut$type == "Laavu kota tai kammi", "#6e3f02",
ifelse(kaikki_palvelut$type == "Majoituskohteet", "#616161",
ifelse(kaikki_palvelut$type == "Pyörämatkailijatunnus", "#36a4f7", NA))))))))))
# Write the updated 'kaikki_palvelut' shapefile back to disk
st_write(kaikki_palvelut, "services_VE1.shp", delete_layer = TRUE)
library(sf)
library(dplyr)
setwd("C:/Users/MattiPonkanen/github/Eurovelo13_analysis/streamlit/data")
kaikki_palvelut <- st_read("servicesVE0.shp")
# Rename the values in the 'type' column
kaikki_palvelut$type <- gsub("apteekit", "Apteekki", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("huoltoasemat", "Huoltoasemat", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("kahvilat_ja_ravintolat", "Kahvilat ja ravintolat", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("kulttuurikohteet", "Kulttuurikohteet", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("laavu_kota_kammi", "Laavu kota tai kammi", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("majoituskohteet", "Majoituskohteet", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("muistomerkki", "Muistomerkki", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("pyoramatkailijatunnus", "Pyörämatkailijatunnus", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("ruokakaupat", "Ruokakaupat", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("uimapaikat", "Uimapaikat", kaikki_palvelut$type)
kaikki_palvelut$color <- ifelse(kaikki_palvelut$type == "Apteekki", "#027a16",
ifelse(kaikki_palvelut$type == "Huoltoasemat", "#170791",
ifelse(kaikki_palvelut$type == "Kahvilat ja ravintolat", "#ed0270",
ifelse(kaikki_palvelut$type == "Ruokakaupat", "#fc950d",
ifelse(kaikki_palvelut$type == "Kulttuurikohteet", "#8604b5",
ifelse(kaikki_palvelut$type == "Muistomerkki", "#085d69",
ifelse(kaikki_palvelut$type == "Uimapaikat", "#d1b604",
ifelse(kaikki_palvelut$type == "Laavu kota tai kammi", "#6e3f02",
ifelse(kaikki_palvelut$type == "Majoituskohteet", "#616161",
ifelse(kaikki_palvelut$type == "Pyörämatkailijatunnus", "#36a4f7", NA))))))))))
# Write the updated 'kaikki_palvelut' shapefile back to disk
st_write(kaikki_palvelut, "services_VE0.shp", delete_layer = TRUE)
