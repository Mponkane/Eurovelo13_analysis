library(sf)
library(dplyr)
setwd("C:/Users/MattiPonkanen/FLOU/FLOU - Tiedostot/Sales and Projects/0290 Eurovelo - 13 Service level analysis/Paikkatietoaineistot")
shapefiles <- c("apteekki.shp", "huoltoasemat.shp", "kahvilat_ja_ravintolat.shp", "kulttuurikohteet.shp", "laavu_kota_kammi.shp", "majoituskohteet.shp", "muistomerkki.shp", "pyoramatkailijatunnus.shp", "ruokakaupat.shp", "uimapaikat.shp")
shapefile_list <- list()
# Loop through each shapefile and read it into R
for (i in 1:length(shapefiles)) {
# Read the shapefile into R
shp <- st_read(shapefiles[i])
# Transform the shapefile to the EPSG:4326 CRS
shp <- st_transform(shp, crs = 4326)
# Rename the name field if necessary
if (shapefiles[i] == "uimapaikat.shp") {
shp <- shp %>% rename(name = nimi_fi)
} else if (shapefiles[i] == "laavu_kota_kammi.shp") {
shp <- shp %>% rename(name = nimi_fi)
} else if (shapefiles[i] == "apteekki.shp") {
shp <- shp %>% rename(name = Name)
} else if (shapefiles[i] == "geocoded_addresses.shp") {
shp <- shp %>% rename(name = Nimi)
}
# Create the name field if it doesn't exist
if (!"name" %in% colnames(shp)) {
if (shapefiles[i] == "huoltoasemat.shp") {
shp$name <- "huoltoasema"
} else if (shapefiles[i] == "muistomerkki.shp") {
shp$name <- "muistomerkki"
}
}
# Select only the 'name' and 'geometry' columns
shp <- shp %>% select(name, geometry)
# Add a new field called 'service_type' and fill it with the name of the file
shp$type <- gsub(".shp$", "", shapefiles[i])
# Add the shapefile to the list
shapefile_list[[i]] <- shp
}
library(sf)
library(dplyr)
setwd("C:/Users/MattiPonkanen/FLOU/FLOU - Tiedostot/Sales and Projects/0290 Eurovelo - 13 Service level analysis/Paikkatietoaineistot")
shapefiles <- c("apteekit.shp", "huoltoasemat.shp", "kahvilat_ja_ravintolat.shp", "kulttuurikohteet.shp", "laavu_kota_kammi.shp", "majoituskohteet.shp", "muistomerkki.shp", "pyoramatkailijatunnus.shp", "ruokakaupat.shp", "uimapaikat.shp")
shapefile_list <- list()
# Loop through each shapefile and read it into R
for (i in 1:length(shapefiles)) {
# Read the shapefile into R
shp <- st_read(shapefiles[i])
# Transform the shapefile to the EPSG:4326 CRS
shp <- st_transform(shp, crs = 4326)
# Rename the name field if necessary
if (shapefiles[i] == "uimapaikat.shp") {
shp <- shp %>% rename(name = nimi_fi)
} else if (shapefiles[i] == "laavu_kota_kammi.shp") {
shp <- shp %>% rename(name = nimi_fi)
} else if (shapefiles[i] == "apteekit.shp") {
shp <- shp %>% rename(name = Name)
} else if (shapefiles[i] == "geocoded_addresses.shp") {
shp <- shp %>% rename(name = Nimi)
}
# Create the name field if it doesn't exist
if (!"name" %in% colnames(shp)) {
if (shapefiles[i] == "huoltoasemat.shp") {
shp$name <- "huoltoasema"
} else if (shapefiles[i] == "muistomerkki.shp") {
shp$name <- "muistomerkki"
}
}
# Select only the 'name' and 'geometry' columns
shp <- shp %>% select(name, geometry)
# Add a new field called 'service_type' and fill it with the name of the file
shp$type <- gsub(".shp$", "", shapefiles[i])
# Add the shapefile to the list
shapefile_list[[i]] <- shp
}
library(sf)
library(dplyr)
setwd("C:/Users/MattiPonkanen/FLOU/FLOU - Tiedostot/Sales and Projects/0290 Eurovelo - 13 Service level analysis/Paikkatietoaineistot")
shapefiles <- c("apteekit.shp", "huoltoasemat.shp", "kahvilat_ja_ravintolat.shp", "kulttuurikohteet.shp", "laavu_kota_kammi.shp", "majoituskohteet.shp", "muistomerkki.shp", "pyoramatkailijatunnus.shp", "ruokakaupat.shp", "uimapaikat.shp")
shapefile_list <- list()
# Loop through each shapefile and read it into R
for (i in 1:length(shapefiles)) {
# Read the shapefile into R
shp <- st_read(shapefiles[i])
# Transform the shapefile to the EPSG:4326 CRS
shp <- st_transform(shp, crs = 4326)
# Rename the name field if necessary
if (shapefiles[i] == "uimapaikat.shp") {
shp <- shp %>% rename(name = nimi_fi)
} else if (shapefiles[i] == "laavu_kota_kammi.shp") {
shp <- shp %>% rename(name = nimi_fi)
} else if (shapefiles[i] == "apteekit.shp") {
shp <- shp %>% rename(name = Name)
} else if (shapefiles[i] == "pyoramatkailijatunnus.shp") {
shp <- shp %>% rename(name = Nimi)
}
# Create the name field if it doesn't exist
if (!"name" %in% colnames(shp)) {
if (shapefiles[i] == "huoltoasemat.shp") {
shp$name <- "huoltoasema"
} else if (shapefiles[i] == "muistomerkki.shp") {
shp$name <- "muistomerkki"
}
}
# Select only the 'name' and 'geometry' columns
shp <- shp %>% select(name, geometry)
# Add a new field called 'service_type' and fill it with the name of the file
shp$type <- gsub(".shp$", "", shapefiles[i])
# Add the shapefile to the list
shapefile_list[[i]] <- shp
}
# Combine all the shapefiles into one
combined_shapefile <- do.call(rbind, shapefile_list)
# Write the combined shapefile to disk
st_write(combined_shapefile, "kaikki_palvelut.shp")
library(sf)
library(dplyr)
setwd("C:/Users/MattiPonkanen/github/Eurovelo13_analysis/streamlit/data")
kaikki_palvelut <- st_read("services_VE0.shp")
# Rename the values in the 'type' column
kaikki_palvelut$type <- gsub("apteekki", "Apteekki", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("huoltoasemat", "Huoltoasemat", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("kahvilat_ja_ravintolat", "Kahvilat ja ravintolat", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("kulttuurikohteet", "Kulttuurikohteet", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("laavu_kota_kammi", "Laavu kota tai kammi", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("Majoituskohteet", "Majoituskohteet", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("muistomerkki", "Muistomerkki", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("pyoramatkailijatunnus", "Pyörämatkailijatunnus", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("ruokakaupat", "Ruokakaupat", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("uimapaikat", "Uimapaikat", kaikki_palvelut$type)
kaikki_palvelut$color <- ifelse(kaikki_palvelut$type == "Apteekki", "#027a16",
ifelse(kaikki_palvelut$type == "Huoltoasemat", "#170791",
ifelse(kaikki_palvelut$type == "Kahvilat ja ravintolat", "#ed0270",
ifelse(kaikki_palvelut$type == "Ruokakaupat", "#fc950d",
ifelse(kaikki_palvelut$type == "Kulttuurikohteet", "#8604b5",
ifelse(kaikki_palvelut$type == "Muistomerkki", "#085d69",
ifelse(kaikki_palvelut$type == "Uimapaikat", "#d1b604",
ifelse(kaikki_palvelut$type == "Laavu kota tai kammi", "#6e3f02",
ifelse(kaikki_palvelut$type == "Majoituskohteet", "#616161",
ifelse(kaikki_palvelut$type == "Pyörämatkailijatunnus", "#36a4f7", NA))))))))))
View(kaikki_palvelut)
library(sf)
library(dplyr)
setwd("C:/Users/MattiPonkanen/github/Eurovelo13_analysis/streamlit/data")
kaikki_palvelut <- st_read("kaikki_palvelut.shp")
library(sf)
library(dplyr)
setwd("C:/Users/MattiPonkanen/github/Eurovelo13_analysis/streamlit/data")
kaikki_palvelut <- st_read("services_VE0.shp")
# Rename the values in the 'type' column
kaikki_palvelut$type <- gsub("apteekit", "Apteekki", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("huoltoasemat", "Huoltoasemat", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("kahvilat_ja_ravintolat", "Kahvilat ja ravintolat", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("kulttuurikohteet", "Kulttuurikohteet", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("laavu_kota_kammi", "Laavu kota tai kammi", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("majoituskohteet", "Majoituskohteet", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("muistomerkki", "Muistomerkki", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("pyoramatkailijatunnus", "Pyörämatkailijatunnus", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("ruokakaupat", "Ruokakaupat", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("uimapaikat", "Uimapaikat", kaikki_palvelut$type)
kaikki_palvelut$color <- ifelse(kaikki_palvelut$type == "Apteekki", "#027a16",
ifelse(kaikki_palvelut$type == "Huoltoasemat", "#170791",
ifelse(kaikki_palvelut$type == "Kahvilat ja ravintolat", "#ed0270",
ifelse(kaikki_palvelut$type == "Ruokakaupat", "#fc950d",
ifelse(kaikki_palvelut$type == "Kulttuurikohteet", "#8604b5",
ifelse(kaikki_palvelut$type == "Muistomerkki", "#085d69",
ifelse(kaikki_palvelut$type == "Uimapaikat", "#d1b604",
ifelse(kaikki_palvelut$type == "Laavu kota tai kammi", "#6e3f02",
ifelse(kaikki_palvelut$type == "Majoituskohteet", "#616161",
ifelse(kaikki_palvelut$type == "Pyörämatkailijatunnus", "#36a4f7", NA))))))))))
View(kaikki_palvelut)
# Write the updated 'kaikki_palvelut' shapefile back to disk
st_write(kaikki_palvelut, "services_VE0.shp", delete_layer = TRUE)
library(sf)
library(dplyr)
setwd("C:/Users/MattiPonkanen/github/Eurovelo13_analysis/streamlit/data")
kaikki_palvelut <- st_read("services_VE1.shp")
# Rename the values in the 'type' column
kaikki_palvelut$type <- gsub("apteekit", "Apteekki", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("huoltoasemat", "Huoltoasemat", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("kahvilat_ja_ravintolat", "Kahvilat ja ravintolat", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("kulttuurikohteet", "Kulttuurikohteet", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("laavu_kota_kammi", "Laavu kota tai kammi", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("majoituskohteet", "Majoituskohteet", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("muistomerkki", "Muistomerkki", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("pyoramatkailijatunnus", "Pyörämatkailijatunnus", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("ruokakaupat", "Ruokakaupat", kaikki_palvelut$type)
kaikki_palvelut$type <- gsub("uimapaikat", "Uimapaikat", kaikki_palvelut$type)
kaikki_palvelut$color <- ifelse(kaikki_palvelut$type == "Apteekki", "#027a16",
ifelse(kaikki_palvelut$type == "Huoltoasemat", "#170791",
ifelse(kaikki_palvelut$type == "Kahvilat ja ravintolat", "#ed0270",
ifelse(kaikki_palvelut$type == "Ruokakaupat", "#fc950d",
ifelse(kaikki_palvelut$type == "Kulttuurikohteet", "#8604b5",
ifelse(kaikki_palvelut$type == "Muistomerkki", "#085d69",
ifelse(kaikki_palvelut$type == "Uimapaikat", "#d1b604",
ifelse(kaikki_palvelut$type == "Laavu kota tai kammi", "#6e3f02",
ifelse(kaikki_palvelut$type == "Majoituskohteet", "#616161",
ifelse(kaikki_palvelut$type == "Pyörämatkailijatunnus", "#36a4f7", NA))))))))))
# Write the updated 'kaikki_palvelut' shapefile back to disk
st_write(kaikki_palvelut, "services_VE1.shp", delete_layer = TRUE)
library(sf)
library(dplyr)
# Set the distance threshold (in meters)
distance_threshold <- 1
# Read the shapefiles
opportunities_VE0 <- st_read('streamlit/data/services_VE0.shp')
library(sf)
library(dplyr)
setwd("C:/Users/MattiPonkanen/github/Eurovelo13_analysis/streamlit/data")
# Set the distance threshold (in meters)
distance_threshold <- 1
# Read the shapefiles
opportunities_VE0 <- st_read('services_VE0.shp')
opportunities_VE1 <- st_read('services_VE1.shp')
# Combine the two data frames into a single data frame
combined_data <- bind_rows(opportunities_VE0, opportunities_VE1)
# Find points that are within the distance threshold of each other
duplicates <- combined_data %>%
mutate(duplicate = FALSE) %>%
group_by(geometry) %>%
mutate(duplicate = ifelse(n() > 1, TRUE, duplicate)) %>%
ungroup() %>%
filter(duplicate)
# Remove points that are within the distance threshold of each other from the original data frames
opportunities_VE0 <- opportunities_VE0[!st_intersects(opportunities_VE0, duplicates, sparse = FALSE), ]
opportunities_VE1 <- opportunities_VE1[!st_intersects(opportunities_VE1, duplicates, sparse = FALSE), ]
# Write the updated data frames to shapefiles
st_write(opportunities_VE0, 'streamlit/data/services_VE0.shp', delete_layer = TRUE)
# Write the updated data frames to shapefiles
st_write(opportunities_VE0, 'services_VE0.shp', delete_layer = TRUE)
st_write(opportunities_VE0, 'services_VE0.shp')
library(sf)
library(dplyr)
setwd("C:/Users/MattiPonkanen/github/Eurovelo13_analysis/streamlit/data")
# Set the distance threshold (in meters)
distance_threshold <- 1
# Read the shapefiles
opportunities_VE0 <- st_read('services_VE0.shp')
st_write(opportunities_VE0, 'services_VE0.shp', delete_layer = TRUE)
st_write(opportunities_VE0, 'services_VE0.shp')
st_write(opportunities_VE0, 'services_VE0.shp')
st_write(opportunities_VE1, 'services_VE1.shp')
st_write(opportunities_VE0, 'services_VE0.shp', delete_layer = TRUE)
st_write(opportunities_VE1, 'services_VE1.shp', delete_layer = TRUE)
View(opportunities_VE1)
# Install and load the foreign package
install.packages("foreign")
library(foreign)
library(foreign)
setwd("C:/Users/MattiPonkanen/github/Eurovelo13_analysis/streamlit/data")
# Set the path to the DBF file
dbf_file <- "services_VE0.dbf"
# Read the DBF file
data <- read.dbf(dbf_file)
# Change the encoding of the character columns
data[] <- lapply(data, function(x) if(is.character(x)) iconv(x, from = "", to = "UTF-8") else x)
# Write the data back to the DBF file
write.dbf(data, dbf_file)
library(foreign)
setwd("C:/Users/MattiPonkanen/github/Eurovelo13_analysis/streamlit/data")
# Set the path to the DBF file
dbf_file <- "servicesVE0.dbf"
# Read the DBF file
data <- read.dbf(dbf_file)
# Change the encoding of the character columns
data[] <- lapply(data, function(x) if(is.character(x)) iconv(x, from = "", to = "UTF-8") else x)
# Write the data back to the DBF file
write.dbf(data, dbf_file)
library(sf)
library(dplyr)
setwd("C:/Users/MattiPonkanen/github/Eurovelo13_analysis/streamlit/data")
kp <- st_read("kansallispuistot.shp")
vama <- st_read("VAMA.shp")
palvelut <- st_read("palvelut.shp")
buffer <- st_read("buffer.shp")
palvelut$stroke <- NA
# Merge kp and vama
merged_polygons <- rbind(kp, vama)
buffer <- st_transform(buffer, crs = st_crs(merged_polygons))
# Create a new field called 'segmentti' in the merged_polygons shapefile
merged_polygons$segmentti <- NA
# Loop through each polygon in the merged_polygons shapefile
for (i in 1:nrow(merged_polygons)) {
# Get the current polygon
polygon <- merged_polygons[i, ]
# Find the buffer polygons that intersect the current polygon
intersects <- st_intersects(polygon, buffer)
# Check if the polygon intersects any buffer polygons
if (length(intersects[[1]]) > 0) {
# Get the names of the buffer polygons that intersect the current polygon
intersects_names <- buffer[intersects[[1]], ]$name
# Check if the polygon intersects multiple buffer polygons
if (length(intersects_names) > 1) {
# The polygon intersects multiple buffer polygons, so we need to decide how to handle this case
# One option is to concatenate all the intersecting buffer polygon names into a single string separated by commas
merged_polygons$segmentti[i] <- paste(intersects_names, collapse = ", ")
} else {
# The polygon only intersects one buffer polygon, so we can simply use its name as the value for the 'segmentti' field
merged_polygons$segmentti[i] <- intersects_names
}
}
}
# Transform palvelut to the CRS of merged_polygons
palvelut_transformed <- st_transform(palvelut, crs = st_crs(merged_polygons))
# Merge palvelut_transformed with merged_polygons
merged_polygons <- rbind(merged_polygons, palvelut_transformed)
